/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['wrap.js']) {
  _$jscoverage['wrap.js'] = [];
  _$jscoverage['wrap.js'][1] = 0;
  _$jscoverage['wrap.js'][2] = 0;
  _$jscoverage['wrap.js'][4] = 0;
  _$jscoverage['wrap.js'][5] = 0;
  _$jscoverage['wrap.js'][6] = 0;
  _$jscoverage['wrap.js'][10] = 0;
  _$jscoverage['wrap.js'][12] = 0;
  _$jscoverage['wrap.js'][13] = 0;
  _$jscoverage['wrap.js'][17] = 0;
  _$jscoverage['wrap.js'][20] = 0;
  _$jscoverage['wrap.js'][21] = 0;
  _$jscoverage['wrap.js'][25] = 0;
  _$jscoverage['wrap.js'][26] = 0;
  _$jscoverage['wrap.js'][28] = 0;
  _$jscoverage['wrap.js'][29] = 0;
  _$jscoverage['wrap.js'][31] = 0;
  _$jscoverage['wrap.js'][33] = 0;
  _$jscoverage['wrap.js'][34] = 0;
  _$jscoverage['wrap.js'][36] = 0;
  _$jscoverage['wrap.js'][38] = 0;
  _$jscoverage['wrap.js'][40] = 0;
  _$jscoverage['wrap.js'][43] = 0;
  _$jscoverage['wrap.js'][44] = 0;
  _$jscoverage['wrap.js'][45] = 0;
  _$jscoverage['wrap.js'][49] = 0;
  _$jscoverage['wrap.js'][50] = 0;
  _$jscoverage['wrap.js'][51] = 0;
  _$jscoverage['wrap.js'][55] = 0;
  _$jscoverage['wrap.js'][56] = 0;
  _$jscoverage['wrap.js'][57] = 0;
  _$jscoverage['wrap.js'][60] = 0;
  _$jscoverage['wrap.js'][64] = 0;
  _$jscoverage['wrap.js'][65] = 0;
  _$jscoverage['wrap.js'][66] = 0;
  _$jscoverage['wrap.js'][67] = 0;
  _$jscoverage['wrap.js'][68] = 0;
  _$jscoverage['wrap.js'][69] = 0;
  _$jscoverage['wrap.js'][70] = 0;
  _$jscoverage['wrap.js'][71] = 0;
  _$jscoverage['wrap.js'][72] = 0;
  _$jscoverage['wrap.js'][73] = 0;
  _$jscoverage['wrap.js'][74] = 0;
  _$jscoverage['wrap.js'][75] = 0;
  _$jscoverage['wrap.js'][77] = 0;
  _$jscoverage['wrap.js'][89] = 0;
  _$jscoverage['wrap.js'][90] = 0;
  _$jscoverage['wrap.js'][91] = 0;
  _$jscoverage['wrap.js'][92] = 0;
  _$jscoverage['wrap.js'][93] = 0;
  _$jscoverage['wrap.js'][94] = 0;
  _$jscoverage['wrap.js'][95] = 0;
  _$jscoverage['wrap.js'][96] = 0;
  _$jscoverage['wrap.js'][97] = 0;
  _$jscoverage['wrap.js'][98] = 0;
  _$jscoverage['wrap.js'][100] = 0;
  _$jscoverage['wrap.js'][101] = 0;
  _$jscoverage['wrap.js'][102] = 0;
  _$jscoverage['wrap.js'][111] = 0;
  _$jscoverage['wrap.js'][112] = 0;
  _$jscoverage['wrap.js'][113] = 0;
  _$jscoverage['wrap.js'][114] = 0;
  _$jscoverage['wrap.js'][115] = 0;
  _$jscoverage['wrap.js'][116] = 0;
  _$jscoverage['wrap.js'][117] = 0;
  _$jscoverage['wrap.js'][118] = 0;
  _$jscoverage['wrap.js'][120] = 0;
  _$jscoverage['wrap.js'][127] = 0;
  _$jscoverage['wrap.js'][128] = 0;
  _$jscoverage['wrap.js'][129] = 0;
  _$jscoverage['wrap.js'][130] = 0;
  _$jscoverage['wrap.js'][131] = 0;
  _$jscoverage['wrap.js'][133] = 0;
  _$jscoverage['wrap.js'][134] = 0;
  _$jscoverage['wrap.js'][137] = 0;
  _$jscoverage['wrap.js'][138] = 0;
  _$jscoverage['wrap.js'][139] = 0;
  _$jscoverage['wrap.js'][140] = 0;
  _$jscoverage['wrap.js'][141] = 0;
  _$jscoverage['wrap.js'][142] = 0;
  _$jscoverage['wrap.js'][143] = 0;
  _$jscoverage['wrap.js'][146] = 0;
  _$jscoverage['wrap.js'][149] = 0;
  _$jscoverage['wrap.js'][150] = 0;
  _$jscoverage['wrap.js'][151] = 0;
}
_$jscoverage['wrap.js'][1]++;
(function (global) {
  _$jscoverage['wrap.js'][2]++;
  "use strict";
  _$jscoverage['wrap.js'][4]++;
  if (global.toString() === "[object Window]" && typeof require === "undefined") {
    _$jscoverage['wrap.js'][5]++;
    require = (function () {
  _$jscoverage['wrap.js'][6]++;
  return global.Pimp;
});
  }
  _$jscoverage['wrap.js'][10]++;
  var Pimp = require("./pimp");
  _$jscoverage['wrap.js'][12]++;
  if (global.exports) {
    _$jscoverage['wrap.js'][13]++;
    global.exports = Pimp;
  }
  else {
    _$jscoverage['wrap.js'][17]++;
    global.Pimp = Pimp;
  }
  _$jscoverage['wrap.js'][20]++;
  function validateCall(methodName, param) {
    _$jscoverage['wrap.js'][21]++;
    switch (methodName) {
    case "Pimp.all":
    case "Pimp.allFail":
    case "Pimp.race":
      _$jscoverage['wrap.js'][25]++;
      if (! (param instanceof Array)) {
        _$jscoverage['wrap.js'][26]++;
        throw new SyntaxError(methodName + " needs to be passed an array");
      }
      _$jscoverage['wrap.js'][28]++;
      if (! param.length) {
        _$jscoverage['wrap.js'][29]++;
        throw new SyntaxError(methodName + " needs an array of length >= 1");
      }
      _$jscoverage['wrap.js'][31]++;
      break;
    case "Pimp.denodeify":
      _$jscoverage['wrap.js'][33]++;
      if (! (param instanceof Function)) {
        _$jscoverage['wrap.js'][34]++;
        throw new SyntaxError(methodName + " needs to be passed a function to promisify");
      }
      _$jscoverage['wrap.js'][36]++;
      break;
    default:
      _$jscoverage['wrap.js'][38]++;
      break;
    }
    _$jscoverage['wrap.js'][40]++;
    return true;
}
  _$jscoverage['wrap.js'][43]++;
  Pimp.resolve = (function (value) {
  _$jscoverage['wrap.js'][44]++;
  return new Pimp((function (ff) {
  _$jscoverage['wrap.js'][45]++;
  ff(value);
}));
});
  _$jscoverage['wrap.js'][49]++;
  Pimp.reject = (function (reason) {
  _$jscoverage['wrap.js'][50]++;
  return new Pimp((function (f, r) {
  _$jscoverage['wrap.js'][51]++;
  r(reason);
}));
});
  _$jscoverage['wrap.js'][55]++;
  Pimp.cast = (function (value) {
  _$jscoverage['wrap.js'][56]++;
  if (value instanceof Pimp && value.then) {
    _$jscoverage['wrap.js'][57]++;
    return value;
  }
  else {
    _$jscoverage['wrap.js'][60]++;
    return Pimp.resolve(value);
  }
});
  _$jscoverage['wrap.js'][64]++;
  Pimp.all = (function (promiseList) {
  _$jscoverage['wrap.js'][65]++;
  validateCall("Pimp.all", promiseList);
  _$jscoverage['wrap.js'][66]++;
  return new Pimp((function (f, rej) {
  _$jscoverage['wrap.js'][67]++;
  var count = 0;
  _$jscoverage['wrap.js'][68]++;
  var resArray = [];
  _$jscoverage['wrap.js'][69]++;
  for (var i in promiseList) {
    _$jscoverage['wrap.js'][70]++;
    if (promiseList.hasOwnProperty(i)) {
      _$jscoverage['wrap.js'][71]++;
      if (! promiseList[i].then) {
        _$jscoverage['wrap.js'][71]++;
        promiseList[i] = Pimp.cast(promiseList[i]);
      }
      _$jscoverage['wrap.js'][72]++;
      promiseList[i].then((function (v) {
  _$jscoverage['wrap.js'][73]++;
  count++;
  _$jscoverage['wrap.js'][74]++;
  resArray.push(v);
  _$jscoverage['wrap.js'][75]++;
  if (promiseList.length === count) {
    _$jscoverage['wrap.js'][75]++;
    f(resArray);
  }
}), (function (r) {
  _$jscoverage['wrap.js'][77]++;
  rej(r);
}));
    }
}
}));
});
  _$jscoverage['wrap.js'][89]++;
  Pimp.allFail = (function (promiseList) {
  _$jscoverage['wrap.js'][90]++;
  validateCall("Pimp.allFail", promiseList);
  _$jscoverage['wrap.js'][91]++;
  return new Pimp((function (f, rej) {
  _$jscoverage['wrap.js'][92]++;
  var count = 0;
  _$jscoverage['wrap.js'][93]++;
  var resArray = [];
  _$jscoverage['wrap.js'][94]++;
  for (var i in promiseList) {
    _$jscoverage['wrap.js'][95]++;
    if (promiseList.hasOwnProperty(i)) {
      _$jscoverage['wrap.js'][96]++;
      if (! promiseList[i].then) {
        _$jscoverage['wrap.js'][96]++;
        promiseList[i] = Pimp.cast(promiseList[i]);
      }
      _$jscoverage['wrap.js'][97]++;
      promiseList[i].then((function (v) {
  _$jscoverage['wrap.js'][98]++;
  rej(v);
}), (function (r) {
  _$jscoverage['wrap.js'][100]++;
  count++;
  _$jscoverage['wrap.js'][101]++;
  resArray.push(r);
  _$jscoverage['wrap.js'][102]++;
  if (promiseList.length === count) {
    _$jscoverage['wrap.js'][102]++;
    f(resArray);
  }
}));
    }
}
}));
});
  _$jscoverage['wrap.js'][111]++;
  Pimp.race = (function (promiseList) {
  _$jscoverage['wrap.js'][112]++;
  validateCall("Pimp.race", promiseList);
  _$jscoverage['wrap.js'][113]++;
  return new Pimp((function (f, rej) {
  _$jscoverage['wrap.js'][114]++;
  for (var i in promiseList) {
    _$jscoverage['wrap.js'][115]++;
    if (promiseList.hasOwnProperty(i)) {
      _$jscoverage['wrap.js'][116]++;
      if (! promiseList[i].then) {
        _$jscoverage['wrap.js'][116]++;
        promiseList[i] = Pimp.cast(promiseList[i]);
      }
      _$jscoverage['wrap.js'][117]++;
      promiseList[i].then((function (v) {
  _$jscoverage['wrap.js'][118]++;
  f(v);
}), (function (r) {
  _$jscoverage['wrap.js'][120]++;
  rej(r);
}));
    }
}
}));
});
  _$jscoverage['wrap.js'][127]++;
  Pimp.deferred = (function () {
  _$jscoverage['wrap.js'][128]++;
  var deferredObj = {};
  _$jscoverage['wrap.js'][129]++;
  deferredObj.promise = new Pimp((function (res, rej) {
  _$jscoverage['wrap.js'][130]++;
  deferredObj.resolve = res;
  _$jscoverage['wrap.js'][131]++;
  deferredObj.reject = rej;
}));
  _$jscoverage['wrap.js'][133]++;
  deferredObj.inspect = deferredObj.promise.inspect;
  _$jscoverage['wrap.js'][134]++;
  return deferredObj;
});
  _$jscoverage['wrap.js'][137]++;
  Pimp.denodeify = (function (fn) {
  _$jscoverage['wrap.js'][138]++;
  validateCall("Pimp.denodeify", fn);
  _$jscoverage['wrap.js'][139]++;
  return (function () {
  _$jscoverage['wrap.js'][140]++;
  var deferred = Pimp.deferred();
  _$jscoverage['wrap.js'][141]++;
  var cb = (function (err, res) {
  _$jscoverage['wrap.js'][142]++;
  if (err) {
    _$jscoverage['wrap.js'][143]++;
    deferred.reject(err);
  }
  else {
    _$jscoverage['wrap.js'][146]++;
    deferred.resolve(res);
  }
});
  _$jscoverage['wrap.js'][149]++;
  [].push.call(arguments, cb);
  _$jscoverage['wrap.js'][150]++;
  fn.apply(this, arguments);
  _$jscoverage['wrap.js'][151]++;
  return deferred.promise;
});
});
})(typeof module === "undefined"? window: module);
_$jscoverage['wrap.js'].source = ["(function(global) {","  'use strict';","  ","  if (global.toString() === \"[object Window]\" &amp;&amp; typeof require === \"undefined\") {","    require = function() {","      return global.Pimp;","    };","  }","  ","  var Pimp = require(\"./pimp\");","","  if (global.exports) {","    global.exports = Pimp;","  }","  //if browser","  else {","    global.Pimp = Pimp;","  }","","  function validateCall(methodName, param) {","    switch (methodName) {","      case \"Pimp.all\":","      case \"Pimp.allFail\":","      case \"Pimp.race\":","        if (!(param instanceof Array)) {","          throw new SyntaxError(methodName + \" needs to be passed an array\");","        }","        if (!param.length) {","          throw new SyntaxError(methodName + \" needs an array of length &gt;= 1\");","        }","        break;","      case \"Pimp.denodeify\":","        if (!(param instanceof Function)) {","          throw new SyntaxError(methodName + \" needs to be passed a function to promisify\");","        }","        break;","      default:","        break;","    }","    return true;","  }","","  Pimp.resolve = function(value) {","    return new Pimp(function(ff) {","      ff(value);","    });","  };","","  Pimp.reject = function(reason) {","    return new Pimp(function(f, r) {","      r(reason);","    });","  };","","  Pimp.cast = function(value) {","    if (value instanceof Pimp &amp;&amp; value.then) {","      return value;","    }","    else {","      return Pimp.resolve(value);","    }","  };","","  Pimp.all = function(promiseList) {","    validateCall(\"Pimp.all\", promiseList);","    return new Pimp(function(f, rej) {","      var count = 0;","      var resArray = [];","      for (var i in promiseList) {","        if (promiseList.hasOwnProperty(i)) {","          if (!promiseList[i].then) promiseList[i] = Pimp.cast(promiseList[i]);","          promiseList[i].then(function(v) {","            count++;","            resArray.push(v);","            if (promiseList.length === count) f(resArray);","          }, function(r) {","            rej(r);","          });","        }","      }","    });","  };","","  //when all promises in promiseList reject, promise returned by Pimp.allFail resolves","  //with an array of reasons of all rejected promises in promiseList as its value","  //if any promise in the promiseList resolves then the promise returned by allFail","  //rejects with the value of the promise that resolved and ignores all the other","  //promises in the promiseList","  Pimp.allFail = function(promiseList) {","    validateCall(\"Pimp.allFail\", promiseList);","    return new Pimp(function(f, rej) {","      var count = 0;","      var resArray = [];","      for (var i in promiseList) {","        if (promiseList.hasOwnProperty(i)) {","          if (!promiseList[i].then) promiseList[i] = Pimp.cast(promiseList[i]);","          promiseList[i].then(function(v) {","            rej(v);","          }, function(r) {","            count++;","            resArray.push(r);","            if (promiseList.length === count) f(resArray);","          });","        }","      }","    });","  };","","  //Returns a promise that either resolves when the first promise in ","  //the iterable resolves, or rejects when the first promise in the iterable rejects.","  Pimp.race = function(promiseList) {","    validateCall(\"Pimp.race\", promiseList);","    return new Pimp(function(f, rej) {","      for (var i in promiseList) {","        if (promiseList.hasOwnProperty(i)) {","          if (!promiseList[i].then) promiseList[i] = Pimp.cast(promiseList[i]);","          promiseList[i].then(function(v) {","            f(v);","          }, function(r) {","            rej(r);","          });","        }","      }","    });","  };","","  Pimp.deferred = function() {","    var deferredObj = {};","    deferredObj.promise = new Pimp(function(res, rej) {","      deferredObj.resolve = res;","      deferredObj.reject = rej;","    });","    deferredObj.inspect = deferredObj.promise.inspect;","    return deferredObj;","  };","","  Pimp.denodeify = function(fn) {","    validateCall(\"Pimp.denodeify\", fn);","    return function() {","      var deferred = Pimp.deferred();","      var cb = function(err, res) {","        if (err) {","          deferred.reject(err);","        }","        else {","          deferred.resolve(res);","        }","      };","      [].push.call(arguments, cb);","      fn.apply(this, arguments);","      return deferred.promise;","    };","  };","","})(typeof module === \"undefined\" ? window : module);"];
